package freetype

import (
	_ "embed"
	"testing"

	"github.com/pekim/freetype-go/internal/font"
	"github.com/stretchr/testify/assert"
)

//go:embed bitmap_visualization_A
var bitmapVisualizationA string

var expectedBitmapForA = []byte{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x54, 0x54, 0x54, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xFF, 0xFF, 0xFF, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0xFF, 0xFF, 0xFF, 0xFF, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0xFF, 0xFF, 0xEA, 0xFF, 0xFF, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0xFF, 0xFF, 0x6B, 0xFE, 0xFF, 0xB7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0xFF, 0xFC, 0x11, 0xCE, 0xFF, 0xF9, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xFC, 0xFF, 0xC6, 0x00, 0x87, 0xFF, 0xFF, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0xFF, 0xFF, 0x7E, 0x00, 0x3F, 0xFF, 0xFF, 0xA2, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0xFF, 0xFF, 0x37, 0x00, 0x05, 0xF2, 0xFF, 0xED, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x07, 0xF4, 0xFF, 0xED, 0x02, 0x00, 0x00, 0xB1, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x4A, 0xFF, 0xFF, 0xA8, 0x00, 0x00, 0x00, 0x69, 0xFF, 0xFF, 0x8D, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x99, 0xFF, 0xFF, 0x61, 0x00, 0x00, 0x00, 0x22, 0xFF, 0xFF, 0xDC, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0xE5, 0xFF, 0xFF, 0x1A, 0x00, 0x00, 0x00, 0x00, 0xDA, 0xFF, 0xFF, 0x2A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x36, 0xFF, 0xFF, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0xFF, 0xFF, 0x79, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x84, 0xFF, 0xFF, 0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0xFF, 0xFF, 0xC7, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xD2, 0xFF, 0xFF, 0xBE, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0xA6, 0xFF, 0xFF, 0xFD, 0x17, 0x00, 0x00,
	0x00, 0x00, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00,
	0x00, 0x00, 0x6F, 0xFF, 0xFF, 0xF6, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xF1, 0xFF, 0xFF, 0xB2, 0x00, 0x00,
	0x00, 0x00, 0xBD, 0xFF, 0xFF, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0xFF, 0xFF, 0xF6, 0x0A, 0x00,
	0x00, 0x10, 0xFB, 0xFF, 0xFF, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDA, 0xFF, 0xFF, 0x4F, 0x00,
	0x00, 0x5A, 0xFF, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0xFF, 0xFF, 0x9D, 0x00,
	0x00, 0xA8, 0xFF, 0xFF, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xFF, 0xFF, 0xE9, 0x02,
	0x05, 0xF1, 0xFF, 0xFF, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xF7, 0xFF, 0xFF, 0x3A,
	0x45, 0xFF, 0xFF, 0xF4, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0xFF, 0xFF, 0x88,
}

func assertGlyphRecFieldsForUppercaseA(t *testing.T, rec *GlyphSlotRec) {
	t.Helper()
	assert.Equal(t, GLYPH_FORMAT_BITMAP, rec.Format)
	assert.Equal(t, Pos(1159), rec.Metrics.Width)
	assert.Equal(t, expectedBitmapForA, rec.Bitmap.Buffer())
	assert.Equal(t, bitmapVisualizationA, rec.Bitmap.BufferVisualization())
}

func TestFaceLoadGlyph(t *testing.T) {
	lib, _ := Init()
	face, _ := lib.NewMemoryFace(font.DejaVuSansMono, 0)

	err := face.LoadGlyph(face.GetCharIndex('A'), LOAD_DEFAULT)
	assert.Nil(t, err)
	err = face.RenderGlyph(RENDER_MODE_NORMAL)
	assert.Nil(t, err)
	assertGlyphRecFieldsForUppercaseA(t, face.Rec().Glyph)
}

func TestFaceGetKerning(t *testing.T) {
	lib, _ := Init()
	face, _ := lib.NewMemoryFace(font.DejaVuSans, 0)

	leftGlyph := face.GetCharIndex('V')
	rightGlyph := face.GetCharIndex('A')
	kerning, err := face.GetKerning(leftGlyph, rightGlyph, KERNING_UNSCALED)
	assert.Nil(t, err)
	assert.Equal(t, Pos(-131), kerning.X)
	assert.Equal(t, Pos(0), kerning.Y)
}
