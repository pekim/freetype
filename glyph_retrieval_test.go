package freetype

import (
	_ "embed"
	"testing"

	"github.com/pekim/freetype/internal/font"
	"github.com/stretchr/testify/assert"
)

//go:embed bitmap_visualization_A
var bitmapVisualizationA string

var expectedBitmapForA = []byte{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xff, 0xff, 0xff, 0xb3, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xf7, 0x0b,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0xfc, 0xff, 0xf6,
	0xff, 0xff, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e,
	0xff, 0xff, 0x7f, 0xff, 0xff, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xae, 0xff, 0xfe, 0x16, 0xd5, 0xff, 0xed, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x08, 0xf4, 0xff, 0xc9, 0x00, 0x8a, 0xff, 0xff, 0x40, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0xff, 0xff, 0x7e, 0x00, 0x3f, 0xff, 0xff, 0x90,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0xff, 0xff, 0x33, 0x00, 0x04,
	0xef, 0xff, 0xdf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xe9, 0xff, 0xe7,
	0x01, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b,
	0xff, 0xff, 0x9d, 0x00, 0x00, 0x00, 0x5e, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x8b, 0xff, 0xff, 0x52, 0x00, 0x00, 0x00, 0x15, 0xfd, 0xff, 0xce, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xda, 0xff, 0xfa, 0x0d, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xff, 0xff,
	0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0xff, 0xff, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x7d, 0xff, 0xff, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0xff, 0xff, 0x71, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x32, 0xff, 0xff, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc9, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x11, 0x00, 0x00, 0x00, 0x00, 0x19,
	0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x5b, 0x00, 0x00,
	0x00, 0x00, 0x68, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xab, 0x00, 0x00, 0x00, 0x00, 0xb7, 0xff, 0xff, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x28, 0xff, 0xff, 0xf3, 0x07, 0x00, 0x00, 0x0d, 0xf9, 0xff, 0xff, 0x1c, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xde, 0xff, 0xff, 0x4a, 0x00, 0x00, 0x56, 0xff, 0xff, 0xd3, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0xff, 0xff, 0x99, 0x00, 0x00, 0xa6, 0xff, 0xff,
	0x8b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0xff, 0xff, 0xe7, 0x01, 0x05,
	0xef, 0xff, 0xff, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xf7, 0xff,
	0xff, 0x38, 0x44, 0xff, 0xff, 0xf4, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xb9, 0xff, 0xff, 0x88,
}

func assertGlyphRecFieldsForUppercaseA(t *testing.T, rec GlyphSlotRec) {
	t.Helper()
	assert.Equal(t, GLYPH_FORMAT_BITMAP, rec.Format)
	assert.Equal(t, Pos(1216), rec.Metrics.Width)
	assert.Equal(t, expectedBitmapForA, rec.Bitmap.Buffer())
	assert.Equal(t, bitmapVisualizationA, rec.Bitmap.BufferVisualization())
}

func TestFaceLoadGlyph(t *testing.T) {
	lib, _ := Init()
	face, _ := lib.NewMemoryFace(font.DejaVuSansMono, 0)

	err := face.SetPixelSizes(0, 32)
	assert.Nil(t, err)
	err = face.LoadGlyph(face.GetCharIndex('A'), LOAD_DEFAULT)
	assert.Nil(t, err)
	err = face.RenderGlyph(RENDER_MODE_NORMAL)
	assert.Nil(t, err)
	assertGlyphRecFieldsForUppercaseA(t, *face.Rec().Glyph.Rec())
}

func TestFaceGetKerning(t *testing.T) {
	lib, _ := Init()
	face, _ := lib.NewMemoryFace(font.DejaVuSans, 0)

	leftGlyph := face.GetCharIndex('V')
	rightGlyph := face.GetCharIndex('A')
	kerning, err := face.GetKerning(leftGlyph, rightGlyph, KERNING_UNSCALED)
	assert.Nil(t, err)
	assert.Equal(t, Pos(-131), kerning.X)
	assert.Equal(t, Pos(0), kerning.Y)
}

// TODO add missing tests
